'use strict';

var obsidian = require('obsidian');

/*! *****************************************************************************
Copyright (c) Microsoft Corporation.

Permission to use, copy, modify, and/or distribute this software for any
purpose with or without fee is hereby granted.

THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
PERFORMANCE OF THIS SOFTWARE.
***************************************************************************** */
/* global Reflect, Promise */

var extendStatics = function(d, b) {
    extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
    return extendStatics(d, b);
};

function __extends(d, b) {
    extendStatics(d, b);
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
}

function inlineLog(str) {
    console.log(str);
    return str;
}
var TextExpander = /** @class */ (function (_super) {
    __extends(TextExpander, _super);
    function TextExpander() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.delay = 2000;
        return _this;
    }
    TextExpander.prototype.onload = function () {
        var _this = this;
        this.addSettingTab(new SettingTab(this.app, this));
        console.log('Loading Text Expander');
        var config = [
            {
                id: 'editor:expandEmbeds',
                name: 'embeds',
                format: function (e) { return '![[' + e + ']]'; }
            },
            {
                id: 'editor:expandLinks',
                name: 'links',
                format: function (e) { return '[[' + e + ']]'; }
            },
            {
                id: 'editor:expandList',
                name: 'list of links',
                format: function (e) { return '- [[' + e + ']]'; }
            },
            {
                id: 'editor:expandTODO',
                name: 'list of TODO',
                format: function (e) { return '- [ ] [[' + e + ']]'; }
            },
        ];
        var reformatLinks = function (links, mapFunc) {
            var currentView = _this.app.workspace.activeLeaf.view;
            if (currentView instanceof obsidian.FileView) {
                return links.map(function (e) { return e.file.name; })
                    .filter(function (e) { return currentView.file.name !== e; })
                    .map(mapFunc).join('\n');
            }
            return links.map(function (e) { return e.file.name; }).map(mapFunc).join('\n');
        };
        function getLastLineNum(doc, line) {
            if (line === void 0) { line = 0; }
            var lineNum = line === 0
                ? doc.getCursor().line
                : line;
            if (doc.lineCount() === lineNum) {
                return doc.getCursor().line + 1;
            }
            return doc.getLine(lineNum) === '---'
                ? lineNum
                : getLastLineNum(doc, lineNum + 1);
        }
        var initExpander = function (mapFunc) {
            // Search files
            var cmDoc =  null;
            // @ts-ignore
            var globalSearchFn = _this.app.internalPlugins.getPluginById('global-search').instance.openGlobalSearch.bind(_this);
            var search = function (query) { return globalSearchFn(inlineLog(query)); };
            var getFoundFilenames = function (mapFunc, callback) {
                var searchLeaf = _this.app.workspace.getLeavesOfType('search')[0];
                searchLeaf.open(searchLeaf.view)
                    .then(function (view) { return setTimeout(function () {
                    // Using undocumented feature
                    // @ts-ignore
                    var result = reformatLinks(view.dom.resultDoms, mapFunc);
                    callback(result);
                }, _this.delay); });
            };
            var currentView = _this.app.workspace.activeLeaf.view;
            if (currentView instanceof obsidian.MarkdownView) {
                cmDoc = currentView.sourceMode.cmEditor;
            }
            var hasFormulaRegexp = /^\{\{.+\}\}$/;
            var curNum = cmDoc.getCursor().line;
            var curText = cmDoc.getLine(curNum);
            if (!hasFormulaRegexp.test(curText)) {
                return;
            }
            var isEmbed = cmDoc.getLine(curNum - 1) === '```expander'
                && cmDoc.getLine(curNum + 1) === '```';
            var fstLineNumToReplace = isEmbed
                ? curNum - 1
                : curNum;
            var lstLineNumToReplace = isEmbed
                ? getLastLineNum(cmDoc)
                : curNum;
            var searchQuery = curText.replace('{{', '').replace('}}', '');
            var embedFormula = '```expander\n' +
                '{{' + searchQuery + '}}\n' +
                '```\n';
            var replaceLine = function (content) { return cmDoc.replaceRange(embedFormula + content + '\n\n---', { line: fstLineNumToReplace, ch: 0 }, { line: lstLineNumToReplace, ch: cmDoc.getLine(lstLineNumToReplace).length }); };
            search(inlineLog(searchQuery));
            getFoundFilenames(mapFunc, replaceLine);
        };
        config.forEach(function (e) {
            _this.addCommand({
                id: e.id,
                name: e.name,
                callback: function () { return initExpander(e.format); },
                hotkeys: []
            });
        });
    };
    TextExpander.prototype.onunload = function () {
        console.log('unloading plugin');
    };
    return TextExpander;
}(obsidian.Plugin));
var SettingTab = /** @class */ (function (_super) {
    __extends(SettingTab, _super);
    function SettingTab(app, plugin) {
        var _this = _super.call(this, app, plugin) || this;
        _this.app = app;
        _this.plugin = plugin;
        return _this;
    }
    SettingTab.prototype.display = function () {
        var _this = this;
        var containerEl = this.containerEl;
        containerEl.empty();
        containerEl.createEl('h2', { text: 'Settings for Text Expander' });
        new obsidian.Setting(containerEl)
            .setName('Delay')
            .setDesc('Text expander don\' wait until search completed. It waits for a delay and paste result after that.')
            .addSlider(function (slider) {
            slider.setLimits(1000, 10000, 1000);
            slider.setValue(_this.plugin.delay);
            slider.onChange(function (value) { return _this.plugin.delay = value; });
            slider.setDynamicTooltip();
        });
    };
    return SettingTab;
}(obsidian.PluginSettingTab));

module.exports = TextExpander;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
